(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json';

  const useData = () => {
    const [data, setData] = React$1.useState(null);
    if (data) {
      console.log(data[0]);
    }

    React$1.useEffect(() => {
      d3.json(jsonUrl).then((data) => {
        const {baseTemperature,monthlyVariance} = data;
        setData({
          temp:baseTemperature,
          data:monthlyVariance,
          year: monthlyVariance.map(a=>a["year"]),
          month: monthlyVariance.map(a=>a["month"]),
        });
      });
    }, []);
    return data;
  };

  const AxisBottom = ({
    xScale,
    innerHeight,
    innerWidth,
    tickFormat,
    sHeight
  }) =>
    xScale.ticks().map((tickValue) => {
      
      return (
        React.createElement( React.Fragment, null,
           React.createElement( 'line', { x1: 0, x2: innerWidth, y1: innerHeight, y2: innerHeight }),
           React.createElement( 'line', {  y1: 0, y2: innerHeight }),
        React.createElement( 'g', {
          className: "tick", key: tickValue, transform: `translate(${xScale(
          tickValue
        )},0)` },
           React.createElement( 'line', {  y1: 0, y2: innerHeight + 10 }),
          React.createElement( 'text', {
            style: { textAnchor: 'middle' }, y: innerHeight + sHeight, dy: "0.71rem" },
            (tickValue)
          )
        )
          )
      );
    });

  const AxisLeft = ({
    yScale,
    innerWidth,
    toMonthName,
    sHeight
  }) =>
    yScale.domain().map((tickValue) => {
    
      return (
        React.createElement( 'g', {
          className: "tick", transform: `translate(0,${yScale(
          tickValue
        )})` },
         
         React.createElement( 'line', { x1: -5, x2: innerWidth }),
          React.createElement( 'text', {
            
            key: tickValue, style: { textAnchor: 'end' }, x: -15, dy: sHeight+5 },
            toMonthName(tickValue,'long')
          )
        )
      );
    });

  const color = (c) => {
    c = c + 8.66;
    if (c < 2.8) {
      return '#ecf1f8';
    }
    if (c >= 2.8 && c < 3.9) {
      return '#4575B4';
    }
    if (c >= 3.9 && c < 5) {
      return '#74add1';
    }
    if (c >= 5 && c < 6.1) {
      return '#abd9e9';
    }
    if (c >= 6.1 && c < 7.2) {
      return '#e0f3f8';
    }
    if (c >= 7.2 && c < 8.3) {
      return '#ffffbf';
    }
    if (c >= 8.3 && c < 9.5) {
      return '#fee090';
    }
    if (c >= 9.5 && c < 10.6) {
      return '#fdae61';
    }
    if (c >= 10.6 && c < 11.7) {
      return '#f46d43';
    }
    if (c >= 11.7 && c <= 12.8) {
      return '#d73027';
    }
    if (c > 12.8) {
      return '#97221b';
    }
  };

  const Marks = ({
    data,
    yScale,
    xScale,
    xValue,
    yValue,
    innerHeight,
    tooltip,
  innerWidth,
    onMouseEnter,
    onMouseOut,
    xFormatting,
    sHeight
  }) => (
    React.createElement( 'g', { className: "mark" },
      data.map((d, i) => {
       
        return (
          React.createElement( 'rect', {
            className: 'cell', x: xScale(d["year"]), y: yScale(d['month']-1), width: xScale(2000)-xScale(1999), height: yScale(1), fill: color(d['variance']), onMouseEnter: () =>
              onMouseEnter(d), onMouseOut: () => onMouseOut(null), 'data-month': d['month']-1, 'data-year': d['year'], 'data-temp': d['variance'] })
        );
      })
    )
  );

  const a = Array.from(Array(11).keys());
  const colorLegend = (c) => {
    switch (c) {
      case 0:
        return '#ecf1f8';
      case 1:
        return '#4575B4';
      case 2:
        return '#74add1';
      case 3:
        return '#abd9e9';
      case 4:
        return '#e0f3f8';
      case 5:
        return '#ffffbf';
      case 6:
        return '#fee090';
      case 7:
        return '#fdae61';
      case 8:
        return '#f46d43';
      case 9:
        return '#d73027';
      case 10:
        return '#97221b';
    }
  };

  const temp = (c) => {
    switch (c) {
      case 1:
        return '2.8';
      case 2:
        return '3.9';
      case 3:
        return '5.0';
      case 4:
        return '6.1';
      case 5:
        return '7.2';
      case 6:
        return '8.3';
      case 7:
        return '9.5';
      case 8:
        return '10.6';
      case 9:
        return '11.7';
      case 10:
        return '12.8';
    }
  };
  const Legend = () => {
   
    return (
      React.createElement( 'g', { id: "legend" },
        React.createElement( 'line', {
          x1: 0, x2: 25*11, y1: 25.5, y2: 25.5 }),
        React.createElement( 'line', {
          x1: 0, x2: 0, y1: 25.5, y2: 40 }),
        React.createElement( 'line', {
          x1: 25*11, x2: 25*11, y1: 25.5, y2: 40 }),
        a.map((d, i) => {
          return (
            React.createElement( React.Fragment, null,
              React.createElement( 'rect', {
                width: 25, height: 25, x: 25 * i, y: 0, fill: colorLegend(d) }),
              d > 0 && (
                React.createElement( React.Fragment, null,
                  React.createElement( 'line', {
                    x1: 25 * i, x2: 25 * i, y1: 0, y2: 30 }),
                  React.createElement( 'text', {
                    x: 25 * i, y: 40, textAnchor: "middle" },
                    temp(d)
                  )
                )
              )
            )
          );
        })
      )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 20,
    bottom: 180,
    right: 30,
    left: 150,
  };

  function toMonthName(monthNumber, type) {
    const date = new Date();
    date.setMonth(monthNumber);

    return date.toLocaleString('en-US', {
      month: type,
    });
  }

  const App = () => {
    const data = useData();
    if (!data) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }
    
    const xValue = (d) => d['year'];
    const xAxisLabel = 'Years';

    const yAxisLabel = 'Months';

    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;
    const sHeight = innerHeight / 24;
    const xAxisTickFormat = d3.timeFormat('%Y');
    const timeFormatting = data['data'].map((d) => {
      const { month, year } = d;
      return new Date(`${year}-${month}-01`);
    });
    const xFormatting = (year, month) => {
      return new Date(`${year}-${month}-01`);
    };
   

    const xMax = d3.max(data['data'], xValue);
    const xMin = d3.min(data['data'], xValue);
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data['data'], xValue))
      .range([0, innerWidth]);

    const yAxisTickFormat = d3.timeFormat('%M %S');
    const toolTimeFormat = d3.timeFormat(' %Y %B');

    const yValue = (d) => d['month'];
    const yScale = d3.scaleBand()
      .domain(Array.from(Array(12).keys()))
      .range([0, innerHeight]);

    const onMouseEnter = (e) => {
     
      let temp = (
        data['temp'] + e['variance']
      ).toFixed(1);
      let month = toMonthName(e['month'], 'long');
      let year = e['year'];
      tooldiv
        .style('visibility', 'visible')
        .html(
          () =>
            `${year} - ${month}</br>${temp} ℃</br>${e[
            'variance'
          ].toFixed(1)} ℃`
        )
        .style(
          'top',
          yScale(e['month']) -
            innerHeight / 12 +
            'px'
        )
        .style(
          'left',
          xScale(e['year']) + 100 + 'px'
        )
        .attr('data-year', year);
    };
    const onMouseOut = (e) => {
      tooldiv.style('visibility', 'hidden');
    };
   
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { id: "title" },
          React$1__default.createElement( 'h1', null, "Monthly Global Land-Surface Temperature" ),
          React$1__default.createElement( 'p', { id: "description" }, `${xMin}-${xMax}: base temperature ${data.temp}℃`)
        ),
        React$1__default.createElement( 'div', { className: "copyright" }, "Made by ", React$1__default.createElement( 'a', { href: "https://thembdev.com" },
            React$1__default.createElement( 'img', { src: "https://mbdev-utils.s3.eu-west-3.amazonaws.com/mbdev_logo_sm.svg", alt: "mbdev" })
          )
        ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', {
            transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( 'g', { id: "x-axis" },
              React$1__default.createElement( AxisBottom, {
                innerHeight: innerHeight, innerWidth: innerWidth, xScale: xScale, tickFormat: xAxisTickFormat, sHeight: sHeight })
            ),
            React$1__default.createElement( 'g', { id: "y-axis" },
              React$1__default.createElement( AxisLeft, {
                yScale: yScale, innerWidth: innerWidth, innerHeight: innerHeight, toMonthName: toMonthName, sHeight: sHeight })
            ),

            React$1__default.createElement( 'text', {
              className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 1.4 },
              xAxisLabel
            ),
            React$1__default.createElement( 'text', {
              className: "label", textAnchor: "middle", transform: `translate(${
              -margin.left / 1.5
            },${innerHeight / 2}) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( Marks, {
              data: data['data'], xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, innerHeight: innerHeight, innerWidth: innerWidth, tooltip: (d) => d, xFormatting: xFormatting, onMouseEnter: (e) => onMouseEnter(e), onMouseOut: (e) => onMouseOut(), sHeight: sHeight }),
            React$1__default.createElement( 'g', {
              transform: `translate(${0},${
              innerHeight + 50
            })` },
              React$1__default.createElement( Legend, null )
            )
          )
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,